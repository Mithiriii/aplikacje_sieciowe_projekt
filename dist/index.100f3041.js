class t{constructor(t){this.userAnswer=null,this.text=t.question,this.options=t.options,this.answer=t.answer}getText(){return this.text}getOptions(){return this.options}getUserAnswer(){return this.userAnswer}setUserAnswer(t){this.userAnswer=t}isCorrect(){return this.answer===this.userAnswer}}class e{start(){this.startTime=new Date,this.timerInterval=window.setInterval(()=>this.tick(),1e3)}stop(){this.timerInterval&&(clearInterval(this.timerInterval),this.timerInterval=null,this.elapsedTime+=new Date().getTime()-this.startTime.getTime())}reset(){this.stop(),this.elapsedTime=0}tick(){let t=new Date().getTime()-this.startTime.getTime()+this.elapsedTime,e=this.formatTime(Math.floor(t/6e4%60),Math.floor(t/1e3%60));document.getElementById("timer").textContent=e}formatTime(t,e){return`${t.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`}constructor(){this.elapsedTime=0,this.timerInterval=null}}class s{startQuestionTimer(t){this.ensureTimer(t),this.questionTimers[t].start()}stopQuestionTimer(t){this.questionTimers[t]&&this.questionTimers[t].stop()}markQuestionCorrectness(t,e){this.questionCorrectness[t]=e}ensureTimer(t){this.questionTimers[t]||(this.questionTimers[t]=new e)}getStatistics(){return this.questionTimers.map((t,e)=>({timeSpent:t.formatTime(0,Math.floor(t.elapsedTime/1e3)),correct:this.questionCorrectness[e]}))}constructor(){this.questionTimers=[],this.questionCorrectness=[]}}class i{static #t=this.resultsKey="quizResults";static saveResults(t){let e=i.loadResults();e.push(t),localStorage.setItem(i.resultsKey,JSON.stringify(e))}static loadResults(){let t=localStorage.getItem(i.resultsKey);return t?JSON.parse(t):[]}static saveDetailedStatistics(t){localStorage.setItem("detailedStatistics",JSON.stringify(t))}static loadDetailedStatistics(){let t=localStorage.getItem("detailedStatistics");return t?JSON.parse(t):[]}}class r{constructor(){this.currentQuestionIndex=0,this.score=0,this.questions=[],this.shuffleQuestions(),this.timer=new e,this.statistics=new s}shuffleQuestions(){for(let t=this.questions.length-1;t>0;t--){let e=Math.floor(Math.random()*(t+1));[this.questions[t],this.questions[e]]=[this.questions[e],this.questions[t]]}}getCurrentQuestion(){return this.questions[this.currentQuestionIndex]}nextQuestion(){this.currentQuestionIndex<this.questions.length-1&&this.currentQuestionIndex++}previousQuestion(){this.currentQuestionIndex>0&&this.currentQuestionIndex--}hasFinished(){return this.questions.every(t=>null!==t.getUserAnswer())}calculateScore(){this.score=this.questions.reduce((t,e)=>t+(e.isCorrect()?1:0),0)}setQuestions(e){this.questions=e.map(e=>new t(e))}getScore(){return this.score}getQuestionCount(){return this.questions.length}startQuiz(){this.timer.start(),this.statistics.startQuestionTimer(this.currentQuestionIndex)}endQuiz(){this.timer.stop(),this.statistics.stopQuestionTimer(this.currentQuestionIndex),this.calculateScore(),i.saveResults(this.getScore()),i.saveDetailedStatistics(this.statistics.getStatistics())}}class n{constructor(){this.quizContainer=document.getElementById("app")}renderQuiz(t){let e=t.getCurrentQuestion();this.quizContainer.innerHTML=`
      <div class="question">
        <h2>Question: ${e.getText()}</h2>
        ${this.renderOptions(e)}
      </div>
      <button id="previous">Previous</button>
      <button id="next">Next</button>
      <button id="submit" ${t.hasFinished()?"":"disabled"}>Submit</button>
    `,this.setupOptionListeners(t),this.setupNavigationListeners(t),this.quizContainer.insertAdjacentHTML("beforeend",'<div id="timer"></div>'),t.startQuiz()}renderOptions(t){return t.getOptions().map((e,s)=>`
      <label>
        <input type="radio" name="option" value="${e}" ${t.getUserAnswer()===e?"checked":""} />
        ${e}
      </label>
    `).join("")}setupOptionListeners(t){this.quizContainer.querySelectorAll('input[name="option"]').forEach(e=>{e.addEventListener("change",e=>{let s=e.target.value;t.getCurrentQuestion().setUserAnswer(s),this.enableSubmitIfFinished(t)})})}setupNavigationListeners(t){let e=this.quizContainer.querySelector("#previous"),s=this.quizContainer.querySelector("#next"),i=this.quizContainer.querySelector("#submit");e.onclick=()=>{t.previousQuestion(),this.renderQuiz(t)},s.onclick=()=>{t.nextQuestion(),this.renderQuiz(t)},i.onclick=()=>{t.calculateScore(),this.renderResults(t)}}enableSubmitIfFinished(t){this.quizContainer.querySelector("#submit").disabled=!t.hasFinished()}renderResults(t){this.quizContainer.innerHTML=`
      <div class="results">
        <h2>Results</h2>
        <p>Your score: ${t.getScore()} / ${t.getQuestionCount()}</p>
      </div>
    `,t.endQuiz()}}new class{constructor(){this.quiz=new r,this.renderer=new n,this.loadQuiz()}async loadQuiz(){try{console.log("Jestem tu 0");let t=await fetch("questions.json").then(t=>t.json());console.log("Jestem tu"),this.quiz.setQuestions(t),console.log("Jestem tu2"),this.renderer.renderQuiz(this.quiz),console.log("Jestem tu3"),this.quiz.startQuiz(),console.log("Jestem tu4")}catch(t){console.error("Failed to load quiz questions.",t)}}};
//# sourceMappingURL=index.100f3041.js.map
