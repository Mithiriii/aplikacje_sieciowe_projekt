{"mappings":"AGAO,MAAM,EAMT,YAAY,CAAS,CAAE,CAFf,IAAA,CAAA,UAAA,CAA4B,KAGlC,IAAI,CAAC,IAAI,CAAG,EAAK,QAAQ,CACzB,IAAI,CAAC,OAAO,CAAG,EAAK,OAAO,CAC3B,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,AAC3B,CAEO,SAAkB,CACvB,OAAO,IAAI,CAAC,IAAI,AAClB,CAEO,YAAuB,CAC5B,OAAO,IAAI,CAAC,OAAO,AACrB,CAEO,eAA+B,CACpC,OAAO,IAAI,CAAC,UAAU,AACxB,CAEO,cAAc,CAAc,CAAQ,CACzC,IAAI,CAAC,UAAU,CAAG,CACpB,CAEO,WAAqB,CAC1B,OAAO,IAAI,CAAC,MAAM,GAAK,IAAI,CAAC,UAAU,AACxC,CACF,CC/BK,MAAM,EAKT,OAAQ,CACN,IAAI,CAAC,SAAS,CAAG,IAAI,KACrB,IAAI,CAAC,aAAa,CAAG,OAAO,WAAW,CAAC,IAAM,IAAI,CAAC,IAAI,GAAI,IAC7D,CAEA,MAAO,CACD,IAAI,CAAC,aAAa,GACpB,cAAc,IAAI,CAAC,aAAa,EAChC,IAAI,CAAC,aAAa,CAAG,KACrB,IAAI,CAAC,WAAW,EAAI,IAAI,OAAO,OAAO,GAAK,IAAI,CAAC,SAAS,CAAC,OAAO,GAErE,CAEA,OAAQ,CACN,IAAI,CAAC,IAAI,GACT,IAAI,CAAC,WAAW,CAAG,CACrB,CAEA,MAAO,CAEL,IAAM,EAAW,AADG,IAAI,OACK,OAAO,GAAK,IAAI,CAAC,SAAS,CAAC,OAAO,GAAK,IAAI,CAAC,WAAW,CAG9E,EAAgB,IAAI,CAAC,UAAU,CADrB,KAAK,KAAK,CAAE,EAAY,IAAc,IADtC,KAAK,KAAK,CAAE,EAAW,IAAQ,IAG/C,CAAA,SAAS,cAAc,CAAC,SAAU,WAAW,CAAG,CAClD,CAEA,WAAW,CAAe,CAAE,CAAe,CAAU,CACnD,MAAO,CAAC,EAAE,EAAQ,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAAK,CAAC,EAAE,EAAQ,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAAK,CAAC,AACxF,C,a,CAhCO,IAAA,CAAA,WAAA,CAAsB,EACrB,IAAA,CAAA,aAAA,CAA+B,I,CAgCzC,CCjCK,MAAM,EAIT,mBAAmB,CAAa,CAAE,CAChC,IAAI,CAAC,WAAW,CAAC,GACjB,IAAI,CAAC,cAAc,CAAC,EAAM,CAAC,KAAK,EAClC,CAEA,kBAAkB,CAAa,CAAE,CAC3B,IAAI,CAAC,cAAc,CAAC,EAAM,EAC5B,IAAI,CAAC,cAAc,CAAC,EAAM,CAAC,IAAI,EAEnC,CAEA,wBAAwB,CAAa,CAAE,CAAkB,CAAE,CACzD,IAAI,CAAC,mBAAmB,CAAC,EAAM,CAAG,CACpC,CAEQ,YAAY,CAAa,CAAE,CAC5B,IAAI,CAAC,cAAc,CAAC,EAAM,EAC7B,CAAA,IAAI,CAAC,cAAc,CAAC,EAAM,CAAG,IAAI,CADnC,CAGF,CAEA,eAAgB,CACd,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAO,IAAW,CAAA,CAChD,UAAW,EAAM,UAAU,CAAC,EAAG,KAAK,KAAK,CAAC,EAAM,WAAW,CAAG,MAC9D,QAAS,IAAI,CAAC,mBAAmB,CAAC,EAAM,AAC1C,CAAA,EACF,C,a,CA7BQ,IAAA,CAAA,cAAA,CAA0B,EAAE,CAC5B,IAAA,CAAA,mBAAA,CAAiC,EAAE,A,CA8B7C,CClCK,MAAM,EACe,OAAA,CAAA,CAAA,CAAA,IAAA,CAAA,UAAA,CAAa,aAAb,AAExB,QAAc,YAAY,CAAa,CAAQ,CAC7C,IAAM,EAAU,EAAe,WAAW,GAC1C,EAAQ,IAAI,CAAC,GACb,aAAa,OAAO,CAAC,EAAe,UAAU,CAAE,KAAK,SAAS,CAAC,GACjE,CAEA,OAAc,aAAwB,CACpC,IAAM,EAAU,aAAa,OAAO,CAAC,EAAe,UAAU,EAC9D,OAAO,EAAU,KAAK,KAAK,CAAC,GAAW,EAAE,AAC3C,CAEA,OAAc,uBAAuB,CAAiB,CAAQ,CAC1D,aAAa,OAAO,CAAC,qBAAsB,KAAK,SAAS,CAAC,GAC5D,CAEA,OAAc,wBAAgC,CAC5C,IAAM,EAAa,aAAa,OAAO,CAAC,sBACxC,OAAO,EAAa,KAAK,KAAK,CAAC,GAAc,EAAE,AACjD,CACJ,CJjBK,MAAM,EAOX,aAAc,CALN,IAAA,CAAA,oBAAA,CAA+B,EAC/B,IAAA,CAAA,KAAA,CAAgB,EAKtB,IAAI,CAAC,SAAS,CAAG,EAAE,CACnB,IAAI,CAAC,gBAAgB,GACrB,IAAI,CAAC,KAAK,CAAG,IAAI,EACjB,IAAI,CAAC,UAAU,CAAG,IAAI,CACxB,CAEU,kBAAyB,CAC/B,IAAK,IAAI,EAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,EAAG,EAAI,EAAG,IAAK,CAClD,IAAM,EAAI,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAI,CAAA,EAC1C,EAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,AACjF,CACF,CAEO,oBAA+B,CACpC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,CAAC,AAClD,CAEO,cAAqB,CACtB,IAAI,CAAC,oBAAoB,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,GACtD,IAAI,CAAC,oBAAoB,EAE7B,CAEO,kBAAyB,CAC1B,IAAI,CAAC,oBAAoB,CAAG,GAC9B,IAAI,CAAC,oBAAoB,EAE7B,CAEO,aAAuB,CAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,AAAA,GAAY,AAA6B,OAA7B,EAAS,aAAa,GAChE,CAEO,gBAAuB,CAC5B,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAO,IAClC,EAAS,CAAA,EAAS,SAAS,GAAK,EAAI,CAAA,EAC1C,EACL,CAEO,aAAa,CAAoB,CAAQ,CAC5C,IAAI,CAAC,SAAS,CAAG,EAAc,GAAG,CAAC,AAAA,GAAQ,IAAI,EAAS,GAC1D,CAEK,UAAmB,CACxB,OAAO,IAAI,CAAC,KAAK,AACnB,CAEO,kBAA2B,CAChC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,AAC9B,CAEO,WAAkB,CACrB,IAAI,CAAC,KAAK,CAAC,KAAK,GAChB,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAC9D,CAEO,SAAgB,CACrB,IAAI,CAAC,KAAK,CAAC,IAAI,GACf,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,EAC3D,IAAI,CAAC,cAAc,GACnB,AAAA,EAAe,WAAW,CAAC,IAAI,CAAC,QAAQ,IAExC,AAAA,EAAe,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,GACrE,CACJ,CK1EK,MAAM,EAGX,aAAc,CACZ,IAAI,CAAC,aAAa,CAAG,SAAS,cAAc,CAAC,MAC/C,CAEO,WAAW,CAAU,CAAQ,CAClC,IAAM,EAAkB,EAAK,kBAAkB,EAC/C,CAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAG,CAAC;;sBAEd,EAAE,EAAgB,OAAO,GAAG;QAC1C,EAAE,IAAI,CAAC,aAAa,CAAC,GAAiB;;;;0BAIpB,EAAE,EAAK,WAAW,GAAK,GAAK,WAAW;IAC7D,CAAC,CAED,IAAI,CAAC,oBAAoB,CAAC,GAC1B,IAAI,CAAC,wBAAwB,CAAC,GAC9B,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,YAAa,0BACnD,EAAK,SAAS,EAChB,CAEQ,cAAc,CAAkB,CAAU,CAChD,OAAO,EAAS,UAAU,GAAG,GAAG,CAAC,CAAC,EAAQ,IAAU,CAAC;;iDAER,EAAE,EAAO,EAAE,EAAE,EAAS,aAAa,KAAO,EAAS,UAAY,GAAG;QAC3G,EAAE,EAAO;;IAEb,CAAC,EAAE,IAAI,CAAC,GACV,CAEQ,qBAAqB,CAAU,CAAQ,CAE7C,AADgB,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,wBAC5C,OAAO,CAAC,AAAA,IACd,EAAO,gBAAgB,CAAC,SAAU,AAAC,IACjC,IAAM,EAAiB,EAAG,MAAM,CAAsB,KAAK,CAC3D,EAAK,kBAAkB,GAAG,aAAa,CAAC,GACxC,IAAI,CAAC,sBAAsB,CAAC,EAC9B,EACF,EACF,CAEQ,yBAAyB,CAAU,CAAQ,CACjD,IAAM,EAAiB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,aAClD,EAAa,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAC9C,EAAe,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,UAEtD,CAAA,EAAe,OAAO,CAAG,KACvB,EAAK,gBAAgB,GACrB,IAAI,CAAC,UAAU,CAAC,EAClB,EAEA,EAAW,OAAO,CAAG,KACnB,EAAK,YAAY,GACjB,IAAI,CAAC,UAAU,CAAC,EAClB,EAEA,EAAa,OAAO,CAAG,KACrB,EAAK,cAAc,GACnB,IAAI,CAAC,aAAa,CAAC,EACrB,CACF,CAEQ,uBAAuB,CAAU,CAAQ,CAE/C,AADqB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,WACzC,QAAQ,CAAG,CAAC,EAAK,WAAW,EAC3C,CAEQ,cAAc,CAAU,CAAQ,CACtC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAG,CAAC;;;uBAGb,EAAE,EAAK,QAAQ,GAAG,GAAG,EAAE,EAAK,gBAAgB,GAAG;;IAElE,CAAC,CACD,EAAK,OAAO,EACd,CACF,CNrDE,IA3BF,MAII,aAAc,CACZ,IAAI,CAAC,IAAI,CAAG,IAAI,EAChB,IAAI,CAAC,QAAQ,CAAG,IAAI,EACpB,IAAI,CAAC,QAAQ,EACf,CAEA,MAAc,UAA0B,CACtC,GAAI,CACF,QAAQ,GAAG,CAAC,eACZ,IAAM,EAAY,MAAM,MAAM,kBAAkB,IAAI,CAAC,AAAA,GAAO,EAAI,IAAI,IACpE,QAAQ,GAAG,CAAC,aACZ,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GACvB,QAAQ,GAAG,CAAC,cACZ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAClC,QAAQ,GAAG,CAAC,cACZ,IAAI,CAAC,IAAI,CAAC,SAAS,GACnB,QAAQ,GAAG,CAAC,aACd,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,iCAAkC,EAClD,CACF,CACF","sources":["<anon>","app.ts","Quiz.ts","Question.ts","Timer.ts","Statistics.ts","StorageService.ts","Renderer.ts"],"sourcesContent":["class $56351406f41adf66$export$38435c7d2fecd2f {\n    constructor(data){\n        this.userAnswer = null;\n        this.text = data.question;\n        this.options = data.options;\n        this.answer = data.answer;\n    }\n    getText() {\n        return this.text;\n    }\n    getOptions() {\n        return this.options;\n    }\n    getUserAnswer() {\n        return this.userAnswer;\n    }\n    setUserAnswer(answer) {\n        this.userAnswer = answer;\n    }\n    isCorrect() {\n        return this.answer === this.userAnswer;\n    }\n}\n\n\nclass $45a37d75d82d114f$export$c57e9b2d8b9e4de {\n    start() {\n        this.startTime = new Date();\n        this.timerInterval = window.setInterval(()=>this.tick(), 1000);\n    }\n    stop() {\n        if (this.timerInterval) {\n            clearInterval(this.timerInterval);\n            this.timerInterval = null;\n            this.elapsedTime += new Date().getTime() - this.startTime.getTime();\n        }\n    }\n    reset() {\n        this.stop();\n        this.elapsedTime = 0;\n    }\n    tick() {\n        const currentTime = new Date();\n        const timeDiff = currentTime.getTime() - this.startTime.getTime() + this.elapsedTime;\n        const seconds = Math.floor(timeDiff / 1000 % 60);\n        const minutes = Math.floor(timeDiff / 60000 % 60);\n        const formattedTime = this.formatTime(minutes, seconds);\n        document.getElementById(\"timer\").textContent = formattedTime;\n    }\n    formatTime(minutes, seconds) {\n        return `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n    }\n    constructor(){\n        this.elapsedTime = 0;\n        this.timerInterval = null;\n    }\n}\n\n\n\nclass $ad47fe6352b5eb29$export$bac3506438e44f8d {\n    startQuestionTimer(index) {\n        this.ensureTimer(index);\n        this.questionTimers[index].start();\n    }\n    stopQuestionTimer(index) {\n        if (this.questionTimers[index]) this.questionTimers[index].stop();\n    }\n    markQuestionCorrectness(index, isCorrect) {\n        this.questionCorrectness[index] = isCorrect;\n    }\n    ensureTimer(index) {\n        if (!this.questionTimers[index]) this.questionTimers[index] = new (0, $45a37d75d82d114f$export$c57e9b2d8b9e4de)();\n    }\n    getStatistics() {\n        return this.questionTimers.map((timer, index)=>({\n                timeSpent: timer.formatTime(0, Math.floor(timer.elapsedTime / 1000)),\n                correct: this.questionCorrectness[index]\n            }));\n    }\n    constructor(){\n        this.questionTimers = [];\n        this.questionCorrectness = [];\n    }\n}\n\n\nclass $7a471ef1278e771d$export$f342686c709850c7 {\n    static #_ = this.resultsKey = \"quizResults\";\n    static saveResults(score) {\n        const results = $7a471ef1278e771d$export$f342686c709850c7.loadResults();\n        results.push(score);\n        localStorage.setItem($7a471ef1278e771d$export$f342686c709850c7.resultsKey, JSON.stringify(results));\n    }\n    static loadResults() {\n        const results = localStorage.getItem($7a471ef1278e771d$export$f342686c709850c7.resultsKey);\n        return results ? JSON.parse(results) : [];\n    }\n    static saveDetailedStatistics(statistics) {\n        localStorage.setItem(\"detailedStatistics\", JSON.stringify(statistics));\n    }\n    static loadDetailedStatistics() {\n        const statistics = localStorage.getItem(\"detailedStatistics\");\n        return statistics ? JSON.parse(statistics) : [];\n    }\n}\n\n\nclass $d7983007d7382f1e$export$76709845c4fea6cd {\n    constructor(){\n        this.currentQuestionIndex = 0;\n        this.score = 0;\n        this.questions = [];\n        this.shuffleQuestions();\n        this.timer = new (0, $45a37d75d82d114f$export$c57e9b2d8b9e4de)();\n        this.statistics = new (0, $ad47fe6352b5eb29$export$bac3506438e44f8d)();\n    }\n    shuffleQuestions() {\n        for(let i = this.questions.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.questions[i], this.questions[j]] = [\n                this.questions[j],\n                this.questions[i]\n            ];\n        }\n    }\n    getCurrentQuestion() {\n        return this.questions[this.currentQuestionIndex];\n    }\n    nextQuestion() {\n        if (this.currentQuestionIndex < this.questions.length - 1) this.currentQuestionIndex++;\n    }\n    previousQuestion() {\n        if (this.currentQuestionIndex > 0) this.currentQuestionIndex--;\n    }\n    hasFinished() {\n        return this.questions.every((question)=>question.getUserAnswer() !== null);\n    }\n    calculateScore() {\n        this.score = this.questions.reduce((score, question)=>{\n            return score + (question.isCorrect() ? 1 : 0);\n        }, 0);\n    }\n    setQuestions(questionsData) {\n        this.questions = questionsData.map((data)=>new (0, $56351406f41adf66$export$38435c7d2fecd2f)(data));\n    }\n    getScore() {\n        return this.score;\n    }\n    getQuestionCount() {\n        return this.questions.length;\n    }\n    startQuiz() {\n        this.timer.start();\n        this.statistics.startQuestionTimer(this.currentQuestionIndex);\n    }\n    endQuiz() {\n        this.timer.stop();\n        this.statistics.stopQuestionTimer(this.currentQuestionIndex);\n        this.calculateScore();\n        (0, $7a471ef1278e771d$export$f342686c709850c7).saveResults(this.getScore());\n        // Save detailed statistics if required\n        (0, $7a471ef1278e771d$export$f342686c709850c7).saveDetailedStatistics(this.statistics.getStatistics());\n    }\n}\n\n\nclass $3992890ba6e2c4e0$export$88530751e3977073 {\n    constructor(){\n        this.quizContainer = document.getElementById(\"app\");\n    }\n    renderQuiz(quiz) {\n        const currentQuestion = quiz.getCurrentQuestion();\n        this.quizContainer.innerHTML = `\r\n      <div class=\"question\">\r\n        <h2>Question: ${currentQuestion.getText()}</h2>\r\n        ${this.renderOptions(currentQuestion)}\r\n      </div>\r\n      <button id=\"previous\">Previous</button>\r\n      <button id=\"next\">Next</button>\r\n      <button id=\"submit\" ${quiz.hasFinished() ? \"\" : \"disabled\"}>Submit</button>\r\n    `;\n        this.setupOptionListeners(quiz);\n        this.setupNavigationListeners(quiz);\n        this.quizContainer.insertAdjacentHTML(\"beforeend\", '<div id=\"timer\"></div>');\n        quiz.startQuiz();\n    }\n    renderOptions(question) {\n        return question.getOptions().map((option, index)=>`\r\n      <label>\r\n        <input type=\"radio\" name=\"option\" value=\"${option}\" ${question.getUserAnswer() === option ? \"checked\" : \"\"} />\r\n        ${option}\r\n      </label>\r\n    `).join(\"\");\n    }\n    setupOptionListeners(quiz) {\n        const options = this.quizContainer.querySelectorAll('input[name=\"option\"]');\n        options.forEach((option)=>{\n            option.addEventListener(\"change\", (e)=>{\n                const selectedOption = e.target.value;\n                quiz.getCurrentQuestion().setUserAnswer(selectedOption);\n                this.enableSubmitIfFinished(quiz);\n            });\n        });\n    }\n    setupNavigationListeners(quiz) {\n        const previousButton = this.quizContainer.querySelector(\"#previous\");\n        const nextButton = this.quizContainer.querySelector(\"#next\");\n        const submitButton = this.quizContainer.querySelector(\"#submit\");\n        previousButton.onclick = ()=>{\n            quiz.previousQuestion();\n            this.renderQuiz(quiz);\n        };\n        nextButton.onclick = ()=>{\n            quiz.nextQuestion();\n            this.renderQuiz(quiz);\n        };\n        submitButton.onclick = ()=>{\n            quiz.calculateScore();\n            this.renderResults(quiz);\n        };\n    }\n    enableSubmitIfFinished(quiz) {\n        const submitButton = this.quizContainer.querySelector(\"#submit\");\n        submitButton.disabled = !quiz.hasFinished();\n    }\n    renderResults(quiz) {\n        this.quizContainer.innerHTML = `\r\n      <div class=\"results\">\r\n        <h2>Results</h2>\r\n        <p>Your score: ${quiz.getScore()} / ${quiz.getQuestionCount()}</p>\r\n      </div>\r\n    `;\n        quiz.endQuiz();\n    }\n}\n\n\nclass $de9db17bbab00a4e$var$App {\n    constructor(){\n        this.quiz = new (0, $d7983007d7382f1e$export$76709845c4fea6cd)();\n        this.renderer = new (0, $3992890ba6e2c4e0$export$88530751e3977073)();\n        this.loadQuiz(); // Przenieś wywołanie loadQuiz() przed startQuiz()\n    }\n    async loadQuiz() {\n        try {\n            console.log(\"Jestem tu 0\");\n            const questions = await fetch(\"questions.json\").then((res)=>res.json());\n            console.log(\"Jestem tu\");\n            this.quiz.setQuestions(questions);\n            console.log(\"Jestem tu2\");\n            this.renderer.renderQuiz(this.quiz);\n            console.log(\"Jestem tu3\");\n            this.quiz.startQuiz(); // Wywołaj startQuiz() po wczytaniu pytań\n            console.log(\"Jestem tu4\");\n        } catch (error) {\n            console.error(\"Failed to load quiz questions.\", error);\n        }\n    }\n}\nnew $de9db17bbab00a4e$var$App();\n\n\n//# sourceMappingURL=index.100f3041.js.map\n","import { Quiz } from \"./Quiz\";\r\nimport { Renderer } from \"./Renderer\";\r\n\r\nclass App {\r\n    private quiz: Quiz;\r\n    private renderer: Renderer;\r\n  \r\n    constructor() {\r\n      this.quiz = new Quiz();\r\n      this.renderer = new Renderer();\r\n      this.loadQuiz(); // Przenieś wywołanie loadQuiz() przed startQuiz()\r\n    }\r\n  \r\n    private async loadQuiz(): Promise<void> {\r\n      try {\r\n        console.log(\"Jestem tu 0\")\r\n        const questions = await fetch('questions.json').then(res => res.json());\r\n        console.log(\"Jestem tu\")\r\n        this.quiz.setQuestions(questions);\r\n        console.log(\"Jestem tu2\")\r\n        this.renderer.renderQuiz(this.quiz);\r\n        console.log(\"Jestem tu3\")\r\n        this.quiz.startQuiz(); // Wywołaj startQuiz() po wczytaniu pytań\r\n        console.log(\"Jestem tu4\")\r\n      } catch (error) {\r\n        console.error(\"Failed to load quiz questions.\", error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  new App();\r\n  \r\n","import { Question } from \"./Question\";\r\nimport { Timer } from \"./Timer\";\r\nimport { Statistics } from \"./Statistics\";\r\nimport { StorageService } from \"./StorageService\";\r\n\r\nexport class Quiz {\r\n  private questions: Question[];\r\n  private currentQuestionIndex: number = 0;\r\n  private score: number = 0;\r\n  private timer: Timer;\r\n  private statistics: Statistics;\r\n\r\n  constructor() {\r\n    this.questions = [];\r\n    this.shuffleQuestions();\r\n    this.timer = new Timer();\r\n    this.statistics = new Statistics();\r\n  }\r\n  \r\n    private shuffleQuestions(): void {\r\n      for (let i = this.questions.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [this.questions[i], this.questions[j]] = [this.questions[j], this.questions[i]];\r\n      }\r\n    }\r\n  \r\n    public getCurrentQuestion(): Question {\r\n      return this.questions[this.currentQuestionIndex];\r\n    }\r\n  \r\n    public nextQuestion(): void {\r\n      if (this.currentQuestionIndex < this.questions.length - 1) {\r\n        this.currentQuestionIndex++;\r\n      }\r\n    }\r\n  \r\n    public previousQuestion(): void {\r\n      if (this.currentQuestionIndex > 0) {\r\n        this.currentQuestionIndex--;\r\n      }\r\n    }\r\n  \r\n    public hasFinished(): boolean {\r\n      return this.questions.every(question => question.getUserAnswer() !== null);\r\n    }\r\n  \r\n    public calculateScore(): void {\r\n      this.score = this.questions.reduce((score, question) => {\r\n        return score + (question.isCorrect() ? 1 : 0);\r\n      }, 0);\r\n    }\r\n    \r\n    public setQuestions(questionsData: any[]): void {\r\n        this.questions = questionsData.map(data => new Question(data));        \r\n      }\r\n\r\n    public getScore(): number {\r\n      return this.score;\r\n    }\r\n  \r\n    public getQuestionCount(): number {\r\n      return this.questions.length;\r\n    }\r\n\r\n    public startQuiz(): void {\r\n        this.timer.start();\r\n        this.statistics.startQuestionTimer(this.currentQuestionIndex);\r\n      }\r\n    \r\n      public endQuiz(): void {\r\n        this.timer.stop();\r\n        this.statistics.stopQuestionTimer(this.currentQuestionIndex);\r\n        this.calculateScore();\r\n        StorageService.saveResults(this.getScore());\r\n        // Save detailed statistics if required\r\n        StorageService.saveDetailedStatistics(this.statistics.getStatistics());\r\n      }\r\n  }\r\n  ","export class Question {\r\n    private text: string;\r\n    private options: string[];\r\n    private answer: string;\r\n    private userAnswer: string | null = null;\r\n  \r\n    constructor(data: any) {\r\n      this.text = data.question;\r\n      this.options = data.options;\r\n      this.answer = data.answer;\r\n    }\r\n  \r\n    public getText(): string {\r\n      return this.text;\r\n    }\r\n  \r\n    public getOptions(): string[] {\r\n      return this.options;\r\n    }\r\n  \r\n    public getUserAnswer(): string | null {\r\n      return this.userAnswer;\r\n    }\r\n  \r\n    public setUserAnswer(answer: string): void {\r\n      this.userAnswer = answer;\r\n    }\r\n  \r\n    public isCorrect(): boolean {\r\n      return this.answer === this.userAnswer;\r\n    }\r\n  }\r\n  ","export class Timer {\r\n    private startTime: Date;\r\n    public elapsedTime: number = 0;\r\n    private timerInterval: number | null = null;\r\n  \r\n    start() {\r\n      this.startTime = new Date();\r\n      this.timerInterval = window.setInterval(() => this.tick(), 1000);\r\n    }\r\n  \r\n    stop() {\r\n      if (this.timerInterval) {\r\n        clearInterval(this.timerInterval);\r\n        this.timerInterval = null;\r\n        this.elapsedTime += new Date().getTime() - this.startTime.getTime();\r\n      }\r\n    }\r\n  \r\n    reset() {\r\n      this.stop();\r\n      this.elapsedTime = 0;\r\n    }\r\n  \r\n    tick() {      \r\n      const currentTime = new Date();\r\n      const timeDiff = currentTime.getTime() - this.startTime.getTime() + this.elapsedTime;\r\n      const seconds = Math.floor((timeDiff / 1000) % 60);\r\n      const minutes = Math.floor((timeDiff / (1000 * 60)) % 60);\r\n      const formattedTime = this.formatTime(minutes, seconds);     \r\n      document.getElementById('timer')!.textContent = formattedTime;\r\n    }\r\n  \r\n    formatTime(minutes: number, seconds: number): string {\r\n      return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n    }\r\n  }\r\n  ","import { Timer } from \"./Timer\";\r\n\r\nexport class Statistics {\r\n    private questionTimers: Timer[] = [];\r\n    private questionCorrectness: boolean[] = [];\r\n  \r\n    startQuestionTimer(index: number) {\r\n      this.ensureTimer(index);\r\n      this.questionTimers[index].start();\r\n    }\r\n  \r\n    stopQuestionTimer(index: number) {\r\n      if (this.questionTimers[index]) {\r\n        this.questionTimers[index].stop();\r\n      }\r\n    }\r\n  \r\n    markQuestionCorrectness(index: number, isCorrect: boolean) {\r\n      this.questionCorrectness[index] = isCorrect;\r\n    }\r\n  \r\n    private ensureTimer(index: number) {\r\n      if (!this.questionTimers[index]) {\r\n        this.questionTimers[index] = new Timer();\r\n      }\r\n    }\r\n  \r\n    getStatistics() {\r\n      return this.questionTimers.map((timer, index) => ({\r\n        timeSpent: timer.formatTime(0, Math.floor(timer.elapsedTime / 1000)),\r\n        correct: this.questionCorrectness[index]\r\n      }));\r\n    }\r\n\r\n  }\r\n  ","export class StorageService {\r\n    private static readonly resultsKey = 'quizResults';\r\n  \r\n    public static saveResults(score: number): void {\r\n      const results = StorageService.loadResults();\r\n      results.push(score);\r\n      localStorage.setItem(StorageService.resultsKey, JSON.stringify(results));\r\n    }\r\n  \r\n    public static loadResults(): number[] {\r\n      const results = localStorage.getItem(StorageService.resultsKey);\r\n      return results ? JSON.parse(results) : [];\r\n    }\r\n\r\n    public static saveDetailedStatistics(statistics: any[]): void {\r\n        localStorage.setItem('detailedStatistics', JSON.stringify(statistics));\r\n      }\r\n    \r\n      public static loadDetailedStatistics(): any[] {\r\n        const statistics = localStorage.getItem('detailedStatistics');\r\n        return statistics ? JSON.parse(statistics) : [];\r\n      }\r\n  }\r\n  ","import { Quiz } from \"./Quiz\";\r\nimport { Question } from \"./Question\";\r\n\r\nexport class Renderer {\r\n  private quizContainer: HTMLElement;\r\n\r\n  constructor() {\r\n    this.quizContainer = document.getElementById('app')!;\r\n  }\r\n\r\n  public renderQuiz(quiz: Quiz): void {\r\n    const currentQuestion = quiz.getCurrentQuestion();\r\n    this.quizContainer.innerHTML = `\r\n      <div class=\"question\">\r\n        <h2>Question: ${currentQuestion.getText()}</h2>\r\n        ${this.renderOptions(currentQuestion)}\r\n      </div>\r\n      <button id=\"previous\">Previous</button>\r\n      <button id=\"next\">Next</button>\r\n      <button id=\"submit\" ${quiz.hasFinished() ? '' : 'disabled'}>Submit</button>\r\n    `;\r\n\r\n    this.setupOptionListeners(quiz);\r\n    this.setupNavigationListeners(quiz);\r\n    this.quizContainer.insertAdjacentHTML('beforeend', '<div id=\"timer\"></div>');\r\n    quiz.startQuiz();\r\n  }\r\n\r\n  private renderOptions(question: Question): string {\r\n    return question.getOptions().map((option, index) => `\r\n      <label>\r\n        <input type=\"radio\" name=\"option\" value=\"${option}\" ${question.getUserAnswer() === option ? 'checked' : ''} />\r\n        ${option}\r\n      </label>\r\n    `).join('');\r\n  }\r\n\r\n  private setupOptionListeners(quiz: Quiz): void {\r\n    const options = this.quizContainer.querySelectorAll('input[name=\"option\"]');\r\n    options.forEach(option => {\r\n      option.addEventListener('change', (e) => {\r\n        const selectedOption = (e.target as HTMLInputElement).value;\r\n        quiz.getCurrentQuestion().setUserAnswer(selectedOption);\r\n        this.enableSubmitIfFinished(quiz);\r\n      });\r\n    });\r\n  }\r\n\r\n  private setupNavigationListeners(quiz: Quiz): void {\r\n    const previousButton = this.quizContainer.querySelector('#previous') as HTMLButtonElement;\r\n    const nextButton = this.quizContainer.querySelector('#next') as HTMLButtonElement;\r\n    const submitButton = this.quizContainer.querySelector('#submit') as HTMLButtonElement;\r\n\r\n    previousButton.onclick = () => {\r\n      quiz.previousQuestion();\r\n      this.renderQuiz(quiz);\r\n    };\r\n\r\n    nextButton.onclick = () => {\r\n      quiz.nextQuestion();\r\n      this.renderQuiz(quiz);\r\n    };\r\n\r\n    submitButton.onclick = () => {\r\n      quiz.calculateScore();\r\n      this.renderResults(quiz);\r\n    };\r\n  }\r\n\r\n  private enableSubmitIfFinished(quiz: Quiz): void {\r\n    const submitButton = this.quizContainer.querySelector('#submit') as HTMLButtonElement;\r\n    submitButton.disabled = !quiz.hasFinished();\r\n  }\r\n\r\n  private renderResults(quiz: Quiz): void {\r\n    this.quizContainer.innerHTML = `\r\n      <div class=\"results\">\r\n        <h2>Results</h2>\r\n        <p>Your score: ${quiz.getScore()} / ${quiz.getQuestionCount()}</p>\r\n      </div>\r\n    `;\r\n    quiz.endQuiz();    \r\n  }\r\n}\r\n"],"names":["$56351406f41adf66$export$38435c7d2fecd2f","constructor","data","userAnswer","text","question","options","answer","getText","getOptions","getUserAnswer","setUserAnswer","isCorrect","$45a37d75d82d114f$export$c57e9b2d8b9e4de","start","startTime","Date","timerInterval","window","setInterval","tick","stop","clearInterval","elapsedTime","getTime","reset","timeDiff","currentTime","formattedTime","formatTime","Math","floor","document","getElementById","textContent","minutes","seconds","toString","padStart","$ad47fe6352b5eb29$export$bac3506438e44f8d","startQuestionTimer","index","ensureTimer","questionTimers","stopQuestionTimer","markQuestionCorrectness","questionCorrectness","getStatistics","map","timer","timeSpent","correct","$7a471ef1278e771d$export$f342686c709850c7","_","resultsKey","saveResults","score","results","loadResults","push","localStorage","setItem","JSON","stringify","getItem","parse","saveDetailedStatistics","statistics","loadDetailedStatistics","$d7983007d7382f1e$export$76709845c4fea6cd","currentQuestionIndex","questions","shuffleQuestions","i","length","j","random","getCurrentQuestion","nextQuestion","previousQuestion","hasFinished","every","calculateScore","reduce","setQuestions","questionsData","getScore","getQuestionCount","startQuiz","endQuiz","$3992890ba6e2c4e0$export$88530751e3977073","quizContainer","renderQuiz","quiz","currentQuestion","innerHTML","renderOptions","setupOptionListeners","setupNavigationListeners","insertAdjacentHTML","option","join","querySelectorAll","forEach","addEventListener","e","selectedOption","target","value","enableSubmitIfFinished","previousButton","querySelector","nextButton","submitButton","onclick","renderResults","disabled","renderer","loadQuiz","console","log","fetch","then","res","json","error"],"version":3,"file":"index.100f3041.js.map"}